#!/usr/bin/env python3
import sys
import subprocess

if len(sys.argv) != 2:
    print("usage: gen_kallsyms.py <kernel-elf>", file=sys.stderr)
    sys.exit(1)

elf = sys.argv[1]

out = subprocess.check_output(["nm", "-n", "--defined-only", elf], text=True)
symbols = []

for line in out.splitlines():
    parts = line.split()
    if len(parts) < 3:
        continue
    addr, typ, name = parts[0], parts[1], parts[2]
    try:
        addr_val = int(addr, 16)
    except ValueError:
        continue
    if typ.upper() == "T":
        symbols.append((addr_val, name))

string_table = []
string_indices = []
addresses = []

current_pos = 0
for addr, name in symbols:
    addresses.append(addr)
    string_indices.append(current_pos)

    for char in name:
        string_table.append(ord(char))

    string_table.append(0)
    current_pos += len(name) + 1

print('// Auto-generated by gen_kallsyms.py')
print()

print('// String table with null-terminated strings')
print('var string_table_data linksection(".kallsyms") = [_]u8{')
for i, byte_val in enumerate(string_table):
    if i % 16 == 0:
        print('    ', end='')
    if byte_val == 0:
        print('0, ', end='')
    else:
        print(f'{byte_val}, ', end='')
    if (i + 1) % 16 == 0 or i == len(string_table) - 1:
        print()
print('};')
print()

print('// Array of addresses')
print('var addresses_data linksection(".kallsyms") = [_]u32{')
for addr in addresses:
    print(f'    0x{addr:08x},')
print('};')
print()

print('// Array of string indices into string_table')
print('var string_indices_data linksection(".kallsyms") = [_]u32{')
for idx in string_indices:
    print(f'    {idx},')
print('};')
print()

print(f'// Export the arrays for external use')
print('export const kallsyms_string_table: [*]const u8 linksection(".kallsyms") = &string_table_data;')
print('export const kallsyms_addresses: [*]const u32 linksection(".kallsyms") = &addresses_data;')
print('export const kallsyms_string_indices: [*]const u32 linksection(".kallsyms") = &string_indices_data;')
print(f'export const kallsyms_count: u32 linksection(".kallsyms") = {len(symbols)};')
print(f'export const kallsyms_string_table_size: u32 linksection(".kallsyms") = {len(string_table)};')
